// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//User model
model User {
  id            String           @id @default(uuid())
  username      String
  password      String
  streetAddress String?
  cityName      String?
  countryName   String?
  zipCode       String?
  contactNum    String
  emailAddress  String
  profPic       String?
  biography     String           @db.Text
  verified      Boolean
  isArchived    Boolean?         @default(false)
  isBanned      Boolean?         @default(false)
  setting       AccountSettings?
  role          Roles?
  person        Person?
  company       Company?
  viewer        ResumeLogs[] @relation("ResumeViewer")
  owner         ResumeLogs[] @relation("ResumeOwner")
}

model ResumeLogs {
  id             String  @id @default(uuid())
  resumeViewer   User    @relation("ResumeViewer", fields: [viewerId], references: [id])
  viewerId String
  resumeOwner    User    @relation("ResumeOwner", fields: [ownerId], references: [id])
  ownerId  String
  action         String
  dateCreated    DateTime     @default(now())
}

model AccountSettings {
  id                  String  @id @default(uuid())
  user                User    @relation(fields: [userId], references: [id])
  userId              String  @unique
  receiveJobReco      Boolean @default(true)
  isJobSearching      Boolean @default(true)
  allowViewResume     Boolean @default(true)
  allowDownloadResume Boolean @default(true)
}

//Profiling Module and Resume Module Tables
model Person {
  id                String                  @id @default(uuid())
  user              User?                   @relation(fields: [userId], references: [id])
  userId            String?                 @unique
  firstName         String
  middleName        String
  lastName          String
  suffix            String?
  maindenLastName   String?
  maritalStatus     String?
  birthdate         DateTime?               @db.Date
  supervison        Supervisor[]
  education         Education[]
  experience        Experience[]
  certification     Certification[]
  verifiReq         PersonVerificationReqs?
  skills            PersonSkill[]
  personLicense     PersonLicense[]
  applicationLetter ApplicationLetter[]
  application       Application[]
  contactPerson     CompanyContactPerson?
  recommendations   JobRecommendation[]
}

model Education {
  id         String    @id @default(uuid())
  person     Person    @relation(fields: [personId], references: [id])
  personId   String
  schoolName String
  awards     String?
  qpi        String?
  startDate  DateTime? @db.Date
  endDate    DateTime? @db.Date
  degree     Degree    @relation(fields: [degreeId], references: [id])
  degreeId   String
}

model Degree {
  id           String         @id @default(uuid())
  degreeName   String         @unique
  education    Education[]
  jobDegreeReq JobDegreeReq[]
}

model Experience {
  id          String    @id @default(uuid())
  person      Person    @relation(fields: [personId], references: [id])
  personId    String
  jobTitle    String
  jobDetails  String    @db.Text
  companyName String
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
}

model Certification {
  id          String  @id @default(uuid())
  person      Person  @relation(fields: [personId], references: [id])
  personId    String
  certName    String
  certDetails String?
  certPhoto   String?
}

model PersonVerificationReqs {
  id       String @id @default(uuid())
  person   Person @relation(fields: [personId], references: [id])
  personId String @unique
  idPhoto  String
}

model PersonSkill {
  id       String @id @default(uuid())
  person   Person @relation(fields: [personId], references: [id])
  personId String
  skill    Skills @relation(fields: [skillId], references: [id])
  skillId  String
}

model Skills {
  id           String         @id @default(uuid())
  skillName    String         @unique
  personSkill  PersonSkill[]
  jobSkillsReq JobSkillsReq[]
}

model PersonLicense {
  id              String      @id @default(uuid())
  person          Person      @relation(fields: [personId], references: [id])
  personId        String
  license         PRCLicenses @relation(fields: [licenseId], references: [id])
  licenseId       String
  licensePic      String?
  licenseValidity DateTime?   @db.Date
}

model PRCLicenses {
  id            String          @id @default(uuid())
  licenseName   String          @unique
  personLicense PersonLicense[]
  jobLicenseReq JobLicenseReq[]
}

model Roles {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  roleName String
}

model Company {
  id            String                   @id @default(uuid())
  user          User                     @relation(fields: [userId], references: [id])
  userId        String                   @unique
  companyName   String
  companySize   String
  verifiReq     CompanyVerificationReqs?
  industry      CompIndustry[]
  jobPost       JobPost[]
  companyEvents CompanyEvents[]
  contactPerson CompanyContactPerson[]
  answers       SurveyAnswers[]
}

model CompanyContactPerson {
  id           String  @id @default(uuid())
  company      Company @relation(fields: [companyId], references: [id])
  companyId    String
  person       Person  @relation(fields: [personId], references: [id])
  personId     String  @unique
  email        String
  phone        String
  positionName String
}

model CompanyVerificationReqs {
  id              String  @id @default(uuid())
  company         Company @relation(fields: [companyId], references: [id])
  companyId       String  @unique
  secRegistration String
  dtiRegistration String
  businessPermit  String
}

model CompIndustry {
  id         String   @id @default(uuid())
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String   @unique
  industry   Industry @relation(fields: [industryId], references: [id])
  industryId String
}

model Industry {
  id           String         @id @default(uuid())
  industryName String         @unique
  compIndustry CompIndustry[]
}

//Job Posting Module Tables
model JobPost {
  id                String              @id @default(uuid())
  company           Company             @relation(fields: [companyId], references: [id])
  companyId         String
  jobTitle          String
  yearsExp          String
  jobDesc           String              @db.Text
  jobLoc            String
  employmentType    String
  salary            Int?
  isOpen            Boolean
  workModel         String
  validity          DateTime?
  numOfPosition     Int
  isAppLetterReq    Boolean
  dateCreated       DateTime            @default(now())
  dateUpdated       DateTime            @updatedAt
  applicationLetter ApplicationLetter[]
  application       Application[]
  jobSkillsReq      JobSkillsReq[]
  jobLicenseReq     JobLicenseReq[]
  jobDegreeReq      JobDegreeReq[]
  jobRecommendation JobRecommendation[]
}

model ApplicationLetter {
  id            String  @id @default(uuid())
  appLetterFile String
  person        Person  @relation(fields: [personId], references: [id])
  personId      String
  jobPost       JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId     String
}

model JobRecommendation {
  id        String  @id @default(uuid())
  person    Person  @relation(fields: [personId], references: [id])
  personId  String
  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
}

model Application {
  id          String   @id @default(uuid())
  dateCreated DateTime @default(now())
  status      String
  isArchived  Boolean  @default(false)
  person      Person   @relation(fields: [personId], references: [id])
  personId    String
  jobPost     JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId   String
}

model JobSkillsReq {
  id        String  @id @default(uuid())
  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
  skill     Skills  @relation(fields: [skillId], references: [id])
  skillId   String
}

model JobLicenseReq {
  id        String      @id @default(uuid())
  jobPost   JobPost     @relation(fields: [jobPostId], references: [id])
  jobPostId String
  license   PRCLicenses @relation(fields: [licenseId], references: [id])
  licenseId String
}

model JobDegreeReq {
  id        String  @id @default(uuid())
  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
  degree    Degree  @relation(fields: [degreeId], references: [id])
  degreeId  String
}

model Supervisor {
  id       String @id @default(uuid())
  person   Person @relation(fields: [personId], references: [id])
  personId String
}

model Events {
  id            String          @id @default(uuid())
  eventName     String
  eventDesc     String          @db.Text
  startDate     DateTime?
  endDate       DateTime?
  eventLocation String
  eventPhoto    String?
  companyEvents CompanyEvents[]
}

model CompanyEvents {
  id        String  @id @default(uuid())
  status    String?
  event     Events  @relation(fields: [eventId], references: [id])
  eventId   String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Survey {
  id          String            @id @default(uuid())
  name        String
  dateCreated DateTime          @default(now())
  questions   SurveyQuestions[]
}

model SurveyQuestions {
  id           String          @id @default(uuid())
  survey       Survey          @relation(fields: [surveyId], references: [id])
  surveyId     String
  questionText String
  answers      SurveyAnswers[]
}

model SurveyAnswers {
  id          String          @id @default(uuid())
  company     Company         @relation(fields: [companyId], references: [id])
  companyId   String
  question    SurveyQuestions @relation(fields: [questionId], references: [id])
  questionId  String
  answerValue Int
}


